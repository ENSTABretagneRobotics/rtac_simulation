#ifndef _DEF_RTAC_SIMULATION_UTILS_H_
#define _DEF_RTAC_SIMULATION_UTILS_H_

#include <rtac_base/cuda/algorithm.hcu>
#include <rtac_base/cuda/DeviceVector.h>

namespace rtac { namespace simulation {

template <typename T>
struct ScalarType { using type = T; };
template <typename T>
struct ScalarType<cuda::Complex<T>> { using type = T; };

template <typename T>
struct RangeLess {
    RTAC_HOSTDEVICE auto operator()(const T& lhs, const T& rhs) const {
        return lhs.location()[0] < rhs.location()[0];
    }
};

template <typename T,
          template<typename>class VectorT,
          template<typename>class ComparatorT = RangeLess>
inline void sort_insonification(VectorT<T>& insonificationData,
                                ComparatorT<T> comp = ComparatorT<T>{})
{
    rtac::cuda::sort(insonificationData, comp);
}



}; //namespace simulation
}; //namespace rtac

#endif //_DEF_RTAC_SIMULATION_UTILS_H_

