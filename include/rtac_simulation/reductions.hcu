#ifndef _DEF_RTAC_SIMULATION_REDUCTIONS_H_
#define _DEF_RTAC_SIMULATION_REDUCTIONS_H_

#include <rtac_base/types/VectorView.h>
#include <rtac_base/cuda/DeviceVector.h>

#include <rtac_simulation/utils.hcu>
#include <rtac_simulation/Target2D.h>

namespace rtac { namespace simulation {


/**
 * This is the cuda kernel responsible to aggregate all insonified sample
 * generated by the simulator.
 *
 * These insonified samples are defined by a complex response and a "location".
 * (the 2D location in this case will probably be a time delay or range and a
 * bearing angle).
 */
template <typename Tin,
          typename Tout,
          typename Kernel2DT, typename OutputFunctorT,
          unsigned int BlockSize=1024>
__global__ void sparse_convolve_2d(rtac::types::VectorView<Tin>* dataBins,
                                   TargetView2D<Tout> output,
                                   Kernel2DT          kernel,
                                   OutputFunctorT     outputFunctor)
{
    // shared memory does not play well with templates
    using T = typename ScalarType<Tout>::type;
    extern __shared__ __align__(sizeof(T)) unsigned char sharedMemory[];
    T* sdata = reinterpret_cast<T*>(sharedMemory);

    cuda::Complex<T> acc{0.0f,0.0f};
    for(auto i = threadIdx.x; i < dataBins[blockIdx.x].size(); i += blockDim.x)
    {
        auto datum = dataBins[blockIdx.x][i];
        // This multiplies the datum with the point spread function evaluated
        // at the difference between the datum location and the output bin
        // location.
        acc += datum.datum*kernel(
            datum.y - output.width_coordinate(blockIdx.y),
            datum.x - output.height_coordinate(blockIdx.x));
    }
    
    //reduction of cuda::Complex must be performed independently on real and
    //imag parts for now (issues with volatile conversion TODO:fix this)
    sdata[threadIdx.x] = acc.real();
    __syncthreads();
    cuda::device::reduce_shared<T,BlockSize,rtac::cuda::Addition>(sdata, threadIdx.x);
    if(threadIdx.x == 0)
        acc.real(sdata[0]);

    sdata[threadIdx.x] = acc.imag();
    __syncthreads();
    cuda::device::reduce_shared<T,BlockSize,rtac::cuda::Addition>(sdata, threadIdx.x);

    if(threadIdx.x == 0) {
        acc.imag(sdata[0]);
        output(blockIdx.x,blockIdx.y) = outputFunctor(acc);
    }
}

}; //namespace simulation
}; //namespace rtac

#endif //_DEF_RTAC_SIMULATION_REDUCTIONS_H_
